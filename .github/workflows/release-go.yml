on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string

name: Create release and upload binaries

jobs:
  build-linux:
    name: build-linux
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt install gcc libc6-dev
          sudo apt install libx11-dev xorg-dev libxtst-dev libpng++-dev
          sudo apt install xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev
          sudo apt install libxkbcommon-dev
          sudo apt install xsel xclip

      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      - name: Build
        run: |
          echo $BINARY
          go build -o $BINARY
          chmod a+x ./$BINARY
          tar -czvf ${BINARY}.tar.gz ./$BINARY
          ls -al
          mkdir release
          mv ${BINARY}.tar.gz release
        env:
          BINARY: ${{ inputs.name }}-linux-amd64

      - name: Test
        run: go test -v ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: latest-linux
          path: release

  build-windows:
    name: build-windows
    runs-on: windows-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
      - name: Build
        run: |
          echo $env:BINARY
          go build -o $env:BINARY
          ls
          mkdir release
          mv $env:BINARY release
        env:
          BINARY: ${{ inputs.name }}.exe

      - name: Test
        run: go test -v ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: latest-windows
          path: release

  build-macos:
    name: build-macos
    runs-on: macOS-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      - name: Build
        run: |
          echo $BINARY
          go build -o $BINARY
          chmod a+x ./$BINARY
          mkdir release
          mv $BINARY release
        env:
          BINARY: ${{ inputs.name }}-macos

      - name: Test
        run: go test -v ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: latest-macos
          path: release

  release:
    name: Create and upload release
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: latest-linux

      - name: Download windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: latest-windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v2
        with:
          name: latest-macos

      - name: Zip windows
        run: |
          ls -al
          zip ${{ inputs.name }}-windows.zip ${{ inputs.name }}.exe
          zip ${{ inputs.name }}-macos.zip ${{ inputs.name }}-macos
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ inputs.name }}-windows.zip
          asset_name: ${{ inputs.name }}-windows.zip
          asset_content_type: application/zip

      - name: Upload Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ inputs.name }}-linux-amd64.tar.gz
          asset_name: ${{ inputs.name }}-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ inputs.name }}-macos.zip
          asset_name: ${{ inputs.name }}-macos.zip
          asset_content_type: application/zip
